// <auto-generated />
using System;
using ERP.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERP.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220522124428_SubContractorIdPropertyAddedToWeeklyPlanValue")]
    partial class SubContractorIdPropertyAddedToWeeklyPlanValue
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ERP.Models.AssetDamage", b =>
                {
                    b.Property<int>("AssetDamageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetDamageId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PenalityPercentage")
                        .HasColumnType("decimal(2,2)");

                    b.HasKey("AssetDamageId");

                    b.ToTable("AssetDamages");
                });

            modelBuilder.Entity("ERP.Models.AssetNumberId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("LastId")
                        .HasColumnType("int");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("AssetNumberIds");
                });

            modelBuilder.Entity("ERP.Models.Borrow", b =>
                {
                    b.Property<int>("BorrowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowId"), 1L, 1);

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HandDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HandedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BorrowId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("HandedById");

                    b.HasIndex("RequestedById");

                    b.HasIndex("SiteId");

                    b.ToTable("Borrows");
                });

            modelBuilder.Entity("ERP.Models.BorrowItem", b =>
                {
                    b.Property<int>("BorrowId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentModelId")
                        .HasColumnType("int");

                    b.Property<string>("ApproveRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("HandRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QtyApproved")
                        .HasColumnType("int");

                    b.Property<int>("QtyRequested")
                        .HasColumnType("int");

                    b.Property<string>("RequestRemark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BorrowId", "ItemId", "EquipmentModelId");

                    b.HasIndex("ItemId");

                    b.ToTable("BorrowItems");
                });

            modelBuilder.Entity("ERP.Models.BorrowItemEquipmentAsset", b =>
                {
                    b.Property<int>("BorrowId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentModelId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentAssetId")
                        .HasColumnType("int");

                    b.Property<int?>("AssetDamageId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReturnId")
                        .HasColumnType("int");

                    b.Property<string>("ReturnRemark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BorrowId", "ItemId", "EquipmentModelId", "EquipmentAssetId");

                    b.HasIndex("AssetDamageId");

                    b.HasIndex("EquipmentAssetId");

                    b.HasIndex("ReturnId");

                    b.ToTable("BorrowItemEquipmentAssets");
                });

            modelBuilder.Entity("ERP.Models.BulkPurchase", b =>
                {
                    b.Property<int>("BulkPurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BulkPurchaseId"), 1L, 1);

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPurchaseCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BulkPurchaseId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("RequestedById");

                    b.ToTable("BulkPurchases");
                });

            modelBuilder.Entity("ERP.Models.BulkPurchaseItem", b =>
                {
                    b.Property<int>("BulkPurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentModelId")
                        .HasColumnType("int");

                    b.Property<string>("ApproveRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PurchaseRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QtyApproved")
                        .HasColumnType("int");

                    b.Property<int>("QtyPurchased")
                        .HasColumnType("int");

                    b.Property<int>("QtyRequested")
                        .HasColumnType("int");

                    b.Property<string>("RequestRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BulkPurchaseId", "ItemId", "EquipmentModelId");

                    b.HasIndex("ItemId");

                    b.ToTable("BulkPurchaseItems");
                });

            modelBuilder.Entity("ERP.Models.Buy", b =>
                {
                    b.Property<int>("BuyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuyId"), 1L, 1);

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BuyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BuySiteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CheckedById")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalBuyCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BuyId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("BuySiteId");

                    b.HasIndex("CheckedById");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("RequestedById");

                    b.ToTable("Buys");
                });

            modelBuilder.Entity("ERP.Models.BuyItem", b =>
                {
                    b.Property<int>("BuyId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ApproveRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QtyApproved")
                        .HasColumnType("int");

                    b.Property<int>("QtyBought")
                        .HasColumnType("int");

                    b.Property<int>("QtyRequested")
                        .HasColumnType("int");

                    b.Property<string>("RequestRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BuyId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("BuyItems");
                });

            modelBuilder.Entity("ERP.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<int?>("EmployeeSiteId")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("EmployeeSiteId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ERP.Models.Equipment", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.HasIndex("EquipmentCategoryId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("ERP.Models.EquipmentAsset", b =>
                {
                    b.Property<int>("EquipmentAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentAssetId"), 1L, 1);

                    b.Property<int?>("AssetDamageId")
                        .HasColumnType("int");

                    b.Property<string>("AssetNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CurrentEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentSiteId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentModelId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentAssetId");

                    b.HasIndex("AssetDamageId");

                    b.HasIndex("CurrentEmployeeId");

                    b.HasIndex("CurrentSiteId");

                    b.HasIndex("EquipmentModelId");

                    b.ToTable("EquipmentAssets");
                });

            modelBuilder.Entity("ERP.Models.EquipmentCategory", b =>
                {
                    b.Property<int>("EquipmentCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentCategoryId"), 1L, 1);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentCategoryId");

                    b.ToTable("EquipmentCategories");
                });

            modelBuilder.Entity("ERP.Models.EquipmentModel", b =>
                {
                    b.Property<int>("EquipmentModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentModelId"), 1L, 1);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentModelId");

                    b.HasIndex("ItemId");

                    b.ToTable("EquipmentModels");
                });

            modelBuilder.Entity("ERP.Models.EquipmentSiteQty", b =>
                {
                    b.Property<int>("EquipmentModelId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MinimumQty")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("EquipmentModelId", "SiteId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SiteId");

                    b.ToTable("EquipmentSiteQties");
                });

            modelBuilder.Entity("ERP.Models.Issue", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssueId"), 1L, 1);

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HandDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HandedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IssueId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("HandedById");

                    b.HasIndex("RequestedById");

                    b.HasIndex("SiteId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("ERP.Models.IssueItem", b =>
                {
                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ApproveRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("HandRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QtyApproved")
                        .HasColumnType("int");

                    b.Property<int>("QtyRequested")
                        .HasColumnType("int");

                    b.Property<string>("RequestRemark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IssueId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("IssueItems");
                });

            modelBuilder.Entity("ERP.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ERP.Models.Maintenance", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceId"), 1L, 1);

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApproveRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EquipmentAssetId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentModelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FixDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FixRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FixedById")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MaintenanceId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("EquipmentAssetId");

                    b.HasIndex("EquipmentModelId");

                    b.HasIndex("FixedById");

                    b.HasIndex("ItemId");

                    b.HasIndex("RequestedById");

                    b.HasIndex("SiteId");

                    b.ToTable("Maintenances");
                });

            modelBuilder.Entity("ERP.Models.Material", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsTransferable")
                        .HasColumnType("bit");

                    b.Property<string>("Spec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("ERP.Models.MaterialSiteQty", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("MinimumQty")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "SiteId");

                    b.HasIndex("SiteId");

                    b.ToTable("MaterialSiteQties");
                });

            modelBuilder.Entity("ERP.Models.Miscellaneous", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("Miscellaneouses");
                });

            modelBuilder.Entity("ERP.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCleared")
                        .HasColumnType("bit");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SiteId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ERP.Models.PerformanceSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<float>("PerformancePoint")
                        .HasColumnType("real");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("PerformanceSheets");
                });

            modelBuilder.Entity("ERP.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CoordinatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ERP.Models.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSubContractorWork")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ERP.Models.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"), 1L, 1);

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<int?>("BulkPurchaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CheckedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceivingSiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPurchaseCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("BulkPurchaseId");

                    b.HasIndex("CheckedById");

                    b.HasIndex("ReceivingSiteId");

                    b.HasIndex("RequestedById");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("ERP.Models.PurchaseItem", b =>
                {
                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentModelId")
                        .HasColumnType("int");

                    b.Property<string>("ApproveRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PurchaseRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QtyApproved")
                        .HasColumnType("int");

                    b.Property<int>("QtyPurchased")
                        .HasColumnType("int");

                    b.Property<int>("QtyRequested")
                        .HasColumnType("int");

                    b.Property<string>("RequestRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseId", "ItemId", "EquipmentModelId");

                    b.HasIndex("ItemId");

                    b.ToTable("PurchaseItems");
                });

            modelBuilder.Entity("ERP.Models.PurchaseItemEmployee", b =>
                {
                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentModelId")
                        .HasColumnType("int");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int");

                    b.Property<int>("QtyRequested")
                        .HasColumnType("int");

                    b.Property<string>("RequestRemark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PurchaseId", "ItemId", "EquipmentModelId", "RequestedById");

                    b.HasIndex("ItemId");

                    b.HasIndex("RequestedById");

                    b.ToTable("PurchaseItemEmployees");
                });

            modelBuilder.Entity("ERP.Models.Receive", b =>
                {
                    b.Property<int>("ReceiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiveId"), 1L, 1);

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApproveRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveredById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReceivedById")
                        .HasColumnType("int");

                    b.Property<int>("ReceivingSiteId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ReceiveId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("DeliveredById");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("ReceivedById");

                    b.HasIndex("ReceivingSiteId");

                    b.ToTable("Receives");
                });

            modelBuilder.Entity("ERP.Models.ReceiveItem", b =>
                {
                    b.Property<int>("ReceiveId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentModelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QtyReceived")
                        .HasColumnType("int");

                    b.Property<string>("ReceiveRemark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReceiveId", "ItemId", "EquipmentModelId");

                    b.HasIndex("ItemId");

                    b.ToTable("ReceiveItems");
                });

            modelBuilder.Entity("ERP.Models.Return", b =>
                {
                    b.Property<int>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnId"), 1L, 1);

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReturnedById")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("ReturnId");

                    b.HasIndex("ReturnedById");

                    b.HasIndex("SiteId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("ERP.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Before how many days should a deadline notification be sent",
                            Name = "DeadlineNotificationDay",
                            Value = "10"
                        });
                });

            modelBuilder.Entity("ERP.Models.Site", b =>
                {
                    b.Property<int>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SiteId"), 1L, 1);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PettyCashLimit")
                        .HasColumnType("int");

                    b.HasKey("SiteId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("ERP.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("StoreId");

                    b.HasIndex("SiteId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("ERP.Models.SubTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<double>("Progress")
                        .HasColumnType("float");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("SubTasks");
                });

            modelBuilder.Entity("ERP.Models.Transfer", b =>
                {
                    b.Property<int>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferId"), 1L, 1);

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<string>("DeliveredBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiveSiteId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceivedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SendSiteId")
                        .HasColumnType("int");

                    b.Property<int?>("SentById")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VehiclePlateNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransferId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("ReceiveSiteId");

                    b.HasIndex("ReceivedById");

                    b.HasIndex("RequestedById");

                    b.HasIndex("SendSiteId");

                    b.HasIndex("SentById");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("ERP.Models.TransferItem", b =>
                {
                    b.Property<int>("TransferId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentModelId")
                        .HasColumnType("int");

                    b.Property<string>("ApproveRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("QtyApproved")
                        .HasColumnType("int");

                    b.Property<int>("QtyRequested")
                        .HasColumnType("int");

                    b.Property<string>("ReceiveRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestRemark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendRemark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransferId", "ItemId", "EquipmentModelId");

                    b.HasIndex("ItemId");

                    b.ToTable("TransferItems");
                });

            modelBuilder.Entity("ERP.Models.TransferItemEquipmentAsset", b =>
                {
                    b.Property<int>("TransferId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentModelId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentAssetId")
                        .HasColumnType("int");

                    b.HasKey("TransferId", "ItemId", "EquipmentModelId", "EquipmentAssetId");

                    b.HasIndex("EquipmentAssetId");

                    b.ToTable("TransferItemEquipmentAssets");
                });

            modelBuilder.Entity("ERP.Models.UserAccount", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Username");

                    b.HasIndex("EmployeeId");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("ERP.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<bool>("CanApproveBorrow")
                        .HasColumnType("bit");

                    b.Property<bool>("CanApproveBulkPurchase")
                        .HasColumnType("bit");

                    b.Property<bool>("CanApproveBuy")
                        .HasColumnType("bit");

                    b.Property<bool>("CanApproveIssue")
                        .HasColumnType("bit");

                    b.Property<bool>("CanApproveMaintenance")
                        .HasColumnType("bit");

                    b.Property<bool>("CanApprovePurchase")
                        .HasColumnType("bit");

                    b.Property<bool>("CanApproveReceive")
                        .HasColumnType("bit");

                    b.Property<bool>("CanApproveTransfer")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCheckBuy")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCheckPurchase")
                        .HasColumnType("bit");

                    b.Property<bool>("CanConfirmBulkPurchase")
                        .HasColumnType("bit");

                    b.Property<bool>("CanConfirmBuy")
                        .HasColumnType("bit");

                    b.Property<bool>("CanConfirmPurchase")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditUser")
                        .HasColumnType("bit");

                    b.Property<bool>("CanFixMaintenance")
                        .HasColumnType("bit");

                    b.Property<bool>("CanGetStockNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("CanHandBorrow")
                        .HasColumnType("bit");

                    b.Property<bool>("CanHandIssue")
                        .HasColumnType("bit");

                    b.Property<bool>("CanReceive")
                        .HasColumnType("bit");

                    b.Property<bool>("CanReceiveTransfer")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRequestBorrow")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRequestBulkPurchase")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRequestBuy")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRequestIssue")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRequestMaintenance")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRequestPurchase")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRequestTransfer")
                        .HasColumnType("bit");

                    b.Property<bool>("CanReturnBorrow")
                        .HasColumnType("bit");

                    b.Property<bool>("CanSendTransfer")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewBorrow")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewBulkPurchase")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewBuy")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewIssue")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewMaintenance")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewPurchase")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewReceive")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewTransfer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinance")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CanApproveBorrow = true,
                            CanApproveBulkPurchase = true,
                            CanApproveBuy = true,
                            CanApproveIssue = true,
                            CanApproveMaintenance = true,
                            CanApprovePurchase = true,
                            CanApproveReceive = true,
                            CanApproveTransfer = true,
                            CanCheckBuy = true,
                            CanCheckPurchase = true,
                            CanConfirmBulkPurchase = true,
                            CanConfirmBuy = true,
                            CanConfirmPurchase = true,
                            CanEditUser = true,
                            CanFixMaintenance = true,
                            CanGetStockNotification = true,
                            CanHandBorrow = true,
                            CanHandIssue = true,
                            CanReceive = true,
                            CanReceiveTransfer = true,
                            CanRequestBorrow = true,
                            CanRequestBulkPurchase = true,
                            CanRequestBuy = true,
                            CanRequestIssue = true,
                            CanRequestMaintenance = true,
                            CanRequestPurchase = true,
                            CanRequestTransfer = true,
                            CanReturnBorrow = true,
                            CanSendTransfer = true,
                            CanViewBorrow = true,
                            CanViewBulkPurchase = true,
                            CanViewBuy = true,
                            CanViewIssue = true,
                            CanViewMaintenance = true,
                            CanViewPurchase = true,
                            CanViewReceive = true,
                            CanViewTransfer = true,
                            IsAdmin = false,
                            IsFinance = false,
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("ERP.Models.WeeklyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeekNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("WeekStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("WeeklyPlans");
                });

            modelBuilder.Entity("ERP.Models.WeeklyPlanValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PerformedBy")
                        .HasColumnType("int");

                    b.Property<int?>("SubContractorId")
                        .HasColumnType("int");

                    b.Property<int?>("SubTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeeklyPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubTaskId");

                    b.HasIndex("WeeklyPlanId");

                    b.ToTable("WeeklyPlanValues");
                });

            modelBuilder.Entity("ERP.Models.WeeklyResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeeklyPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeeklyPlanId")
                        .IsUnique();

                    b.ToTable("WeeklyResults");
                });

            modelBuilder.Entity("ERP.Models.WeeklyResultValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<int>("WeeklyResultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubTaskId");

                    b.HasIndex("WeeklyResultId");

                    b.ToTable("WeeklyResultValues");
                });

            modelBuilder.Entity("ERP.Models.AssetNumberId", b =>
                {
                    b.HasOne("ERP.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.Borrow", b =>
                {
                    b.HasOne("ERP.Models.Employee", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Employee", "HandedBy")
                        .WithMany()
                        .HasForeignKey("HandedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Employee", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("HandedBy");

                    b.Navigation("RequestedBy");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ERP.Models.BorrowItem", b =>
                {
                    b.HasOne("ERP.Models.Borrow", "Borrow")
                        .WithMany("BorrowItems")
                        .HasForeignKey("BorrowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Item", "Item")
                        .WithMany("BorrowItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrow");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.BorrowItemEquipmentAsset", b =>
                {
                    b.HasOne("ERP.Models.AssetDamage", "AssetDamage")
                        .WithMany()
                        .HasForeignKey("AssetDamageId");

                    b.HasOne("ERP.Models.Borrow", "Borrow")
                        .WithMany()
                        .HasForeignKey("BorrowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.EquipmentAsset", "EquipmentAsset")
                        .WithMany()
                        .HasForeignKey("EquipmentAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Return", "Return")
                        .WithMany("ReturnEquipmentAssets")
                        .HasForeignKey("ReturnId");

                    b.HasOne("ERP.Models.BorrowItem", "BorrowItem")
                        .WithMany("BorrowEquipmentAssets")
                        .HasForeignKey("BorrowId", "ItemId", "EquipmentModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetDamage");

                    b.Navigation("Borrow");

                    b.Navigation("BorrowItem");

                    b.Navigation("EquipmentAsset");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("ERP.Models.BulkPurchase", b =>
                {
                    b.HasOne("ERP.Models.Employee", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Employee", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("ERP.Models.BulkPurchaseItem", b =>
                {
                    b.HasOne("ERP.Models.BulkPurchase", "BulkPurchase")
                        .WithMany("BulkPurchaseItems")
                        .HasForeignKey("BulkPurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Item", "Item")
                        .WithMany("BulkPurchaseItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BulkPurchase");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.Buy", b =>
                {
                    b.HasOne("ERP.Models.Employee", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Site", "BuySite")
                        .WithMany()
                        .HasForeignKey("BuySiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Models.Employee", "CheckedBy")
                        .WithMany()
                        .HasForeignKey("CheckedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Employee", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("BuySite");

                    b.Navigation("CheckedBy");

                    b.Navigation("Purchase");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("ERP.Models.BuyItem", b =>
                {
                    b.HasOne("ERP.Models.Buy", "Buy")
                        .WithMany("BuyItems")
                        .HasForeignKey("BuyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Item", "Item")
                        .WithMany("BuyItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buy");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.Employee", b =>
                {
                    b.HasOne("ERP.Models.Site", "EmployeeSite")
                        .WithMany()
                        .HasForeignKey("EmployeeSiteId");

                    b.HasOne("ERP.Models.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeSite");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("ERP.Models.Equipment", b =>
                {
                    b.HasOne("ERP.Models.EquipmentCategory", "EquipmentCategory")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Item", "Item")
                        .WithOne("Equipment")
                        .HasForeignKey("ERP.Models.Equipment", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentCategory");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.EquipmentAsset", b =>
                {
                    b.HasOne("ERP.Models.AssetDamage", "AssetDamage")
                        .WithMany()
                        .HasForeignKey("AssetDamageId");

                    b.HasOne("ERP.Models.Employee", "CurrentEmployee")
                        .WithMany()
                        .HasForeignKey("CurrentEmployeeId");

                    b.HasOne("ERP.Models.Site", "CurrentSite")
                        .WithMany()
                        .HasForeignKey("CurrentSiteId");

                    b.HasOne("ERP.Models.EquipmentModel", "EquipmentModel")
                        .WithMany("EquipmentAssets")
                        .HasForeignKey("EquipmentModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetDamage");

                    b.Navigation("CurrentEmployee");

                    b.Navigation("CurrentSite");

                    b.Navigation("EquipmentModel");
                });

            modelBuilder.Entity("ERP.Models.EquipmentModel", b =>
                {
                    b.HasOne("ERP.Models.Equipment", "Equipment")
                        .WithMany("EquipmentModels")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("ERP.Models.EquipmentSiteQty", b =>
                {
                    b.HasOne("ERP.Models.EquipmentModel", "EquipmentModel")
                        .WithMany()
                        .HasForeignKey("EquipmentModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Item", null)
                        .WithMany("EquipmentSiteQties")
                        .HasForeignKey("ItemId");

                    b.HasOne("ERP.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentModel");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ERP.Models.Issue", b =>
                {
                    b.HasOne("ERP.Models.Employee", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Employee", "HandedBy")
                        .WithMany()
                        .HasForeignKey("HandedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Employee", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("HandedBy");

                    b.Navigation("RequestedBy");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ERP.Models.IssueItem", b =>
                {
                    b.HasOne("ERP.Models.Issue", "Issue")
                        .WithMany("IssueItems")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Item", "Item")
                        .WithMany("IssueItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.Maintenance", b =>
                {
                    b.HasOne("ERP.Models.Employee", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.EquipmentAsset", "EquipmentAsset")
                        .WithMany()
                        .HasForeignKey("EquipmentAssetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.EquipmentModel", "EquipmentModel")
                        .WithMany()
                        .HasForeignKey("EquipmentModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Models.Employee", "FixedBy")
                        .WithMany()
                        .HasForeignKey("FixedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Employee", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("EquipmentAsset");

                    b.Navigation("EquipmentModel");

                    b.Navigation("FixedBy");

                    b.Navigation("Item");

                    b.Navigation("RequestedBy");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ERP.Models.Material", b =>
                {
                    b.HasOne("ERP.Models.Item", "Item")
                        .WithOne("Material")
                        .HasForeignKey("ERP.Models.Material", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ERP.Models.MaterialSiteQty", b =>
                {
                    b.HasOne("ERP.Models.Item", "Item")
                        .WithMany("MaterialSiteQties")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ERP.Models.Notification", b =>
                {
                    b.HasOne("ERP.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ERP.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ERP.Models.PerformanceSheet", b =>
                {
                    b.HasOne("ERP.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ERP.Models.ProjectTask", b =>
                {
                    b.HasOne("ERP.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ERP.Models.Purchase", b =>
                {
                    b.HasOne("ERP.Models.Employee", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.BulkPurchase", "BulkPurchase")
                        .WithMany()
                        .HasForeignKey("BulkPurchaseId");

                    b.HasOne("ERP.Models.Employee", "CheckedBy")
                        .WithMany()
                        .HasForeignKey("CheckedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Site", "ReceivingSite")
                        .WithMany()
                        .HasForeignKey("ReceivingSiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Models.Employee", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("BulkPurchase");

                    b.Navigation("CheckedBy");

                    b.Navigation("ReceivingSite");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("ERP.Models.PurchaseItem", b =>
                {
                    b.HasOne("ERP.Models.Item", "Item")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Purchase", "Purchase")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("ERP.Models.PurchaseItemEmployee", b =>
                {
                    b.HasOne("ERP.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Purchase", "Purchase")
                        .WithMany("PurchaseItemEmployees")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Item");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("ERP.Models.Receive", b =>
                {
                    b.HasOne("ERP.Models.Employee", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Employee", "DeliveredBy")
                        .WithMany()
                        .HasForeignKey("DeliveredById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Models.Employee", "ReceivedBy")
                        .WithMany()
                        .HasForeignKey("ReceivedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Site", "ReceivingSite")
                        .WithMany()
                        .HasForeignKey("ReceivingSiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("DeliveredBy");

                    b.Navigation("Purchase");

                    b.Navigation("ReceivedBy");

                    b.Navigation("ReceivingSite");
                });

            modelBuilder.Entity("ERP.Models.ReceiveItem", b =>
                {
                    b.HasOne("ERP.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Receive", "Receive")
                        .WithMany("ReceiveItems")
                        .HasForeignKey("ReceiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Receive");
                });

            modelBuilder.Entity("ERP.Models.Return", b =>
                {
                    b.HasOne("ERP.Models.Employee", "ReturnedBy")
                        .WithMany()
                        .HasForeignKey("ReturnedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReturnedBy");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ERP.Models.Store", b =>
                {
                    b.HasOne("ERP.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ERP.Models.SubTask", b =>
                {
                    b.HasOne("ERP.Models.ProjectTask", "ProjectTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("ERP.Models.Transfer", b =>
                {
                    b.HasOne("ERP.Models.Employee", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Site", "ReceiveSite")
                        .WithMany()
                        .HasForeignKey("ReceiveSiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Models.Employee", "ReceivedBy")
                        .WithMany()
                        .HasForeignKey("ReceivedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERP.Models.Employee", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Models.Site", "SendSite")
                        .WithMany()
                        .HasForeignKey("SendSiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Models.Employee", "SentBy")
                        .WithMany()
                        .HasForeignKey("SentById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovedBy");

                    b.Navigation("ReceiveSite");

                    b.Navigation("ReceivedBy");

                    b.Navigation("RequestedBy");

                    b.Navigation("SendSite");

                    b.Navigation("SentBy");
                });

            modelBuilder.Entity("ERP.Models.TransferItem", b =>
                {
                    b.HasOne("ERP.Models.Item", "Item")
                        .WithMany("TransferItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.Transfer", "Transfer")
                        .WithMany("TransferItems")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("ERP.Models.TransferItemEquipmentAsset", b =>
                {
                    b.HasOne("ERP.Models.EquipmentAsset", "EquipmentAsset")
                        .WithMany()
                        .HasForeignKey("EquipmentAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.TransferItem", "TransferItem")
                        .WithMany("TransferEquipmentAssets")
                        .HasForeignKey("TransferId", "ItemId", "EquipmentModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EquipmentAsset");

                    b.Navigation("TransferItem");
                });

            modelBuilder.Entity("ERP.Models.UserAccount", b =>
                {
                    b.HasOne("ERP.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ERP.Models.WeeklyPlan", b =>
                {
                    b.HasOne("ERP.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ERP.Models.WeeklyPlanValue", b =>
                {
                    b.HasOne("ERP.Models.SubTask", "SubTask")
                        .WithMany()
                        .HasForeignKey("SubTaskId");

                    b.HasOne("ERP.Models.WeeklyPlan", "WeeklyPlan")
                        .WithMany("PlanValues")
                        .HasForeignKey("WeeklyPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubTask");

                    b.Navigation("WeeklyPlan");
                });

            modelBuilder.Entity("ERP.Models.WeeklyResult", b =>
                {
                    b.HasOne("ERP.Models.WeeklyPlan", "WeeklyPlan")
                        .WithOne("WeeklyResult")
                        .HasForeignKey("ERP.Models.WeeklyResult", "WeeklyPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeeklyPlan");
                });

            modelBuilder.Entity("ERP.Models.WeeklyResultValue", b =>
                {
                    b.HasOne("ERP.Models.SubTask", "SubTask")
                        .WithMany("WeeklyResultValues")
                        .HasForeignKey("SubTaskId");

                    b.HasOne("ERP.Models.WeeklyResult", "WeeklyResult")
                        .WithMany("Results")
                        .HasForeignKey("WeeklyResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubTask");

                    b.Navigation("WeeklyResult");
                });

            modelBuilder.Entity("ERP.Models.Borrow", b =>
                {
                    b.Navigation("BorrowItems");
                });

            modelBuilder.Entity("ERP.Models.BorrowItem", b =>
                {
                    b.Navigation("BorrowEquipmentAssets");
                });

            modelBuilder.Entity("ERP.Models.BulkPurchase", b =>
                {
                    b.Navigation("BulkPurchaseItems");
                });

            modelBuilder.Entity("ERP.Models.Buy", b =>
                {
                    b.Navigation("BuyItems");
                });

            modelBuilder.Entity("ERP.Models.Equipment", b =>
                {
                    b.Navigation("EquipmentModels");
                });

            modelBuilder.Entity("ERP.Models.EquipmentCategory", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("ERP.Models.EquipmentModel", b =>
                {
                    b.Navigation("EquipmentAssets");
                });

            modelBuilder.Entity("ERP.Models.Issue", b =>
                {
                    b.Navigation("IssueItems");
                });

            modelBuilder.Entity("ERP.Models.Item", b =>
                {
                    b.Navigation("BorrowItems");

                    b.Navigation("BulkPurchaseItems");

                    b.Navigation("BuyItems");

                    b.Navigation("Equipment")
                        .IsRequired();

                    b.Navigation("EquipmentSiteQties");

                    b.Navigation("IssueItems");

                    b.Navigation("Material")
                        .IsRequired();

                    b.Navigation("MaterialSiteQties");

                    b.Navigation("PurchaseItems");

                    b.Navigation("TransferItems");
                });

            modelBuilder.Entity("ERP.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ERP.Models.ProjectTask", b =>
                {
                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("ERP.Models.Purchase", b =>
                {
                    b.Navigation("PurchaseItemEmployees");

                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("ERP.Models.Receive", b =>
                {
                    b.Navigation("ReceiveItems");
                });

            modelBuilder.Entity("ERP.Models.Return", b =>
                {
                    b.Navigation("ReturnEquipmentAssets");
                });

            modelBuilder.Entity("ERP.Models.SubTask", b =>
                {
                    b.Navigation("WeeklyResultValues");
                });

            modelBuilder.Entity("ERP.Models.Transfer", b =>
                {
                    b.Navigation("TransferItems");
                });

            modelBuilder.Entity("ERP.Models.TransferItem", b =>
                {
                    b.Navigation("TransferEquipmentAssets");
                });

            modelBuilder.Entity("ERP.Models.WeeklyPlan", b =>
                {
                    b.Navigation("PlanValues");

                    b.Navigation("WeeklyResult");
                });

            modelBuilder.Entity("ERP.Models.WeeklyResult", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
